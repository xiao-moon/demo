核心框架:springboot+netty
数据库+持久层:mysql+mybatis 分库分表
图片管理:Nginx+fastdfs
聊天消息保存:RabbitMQ+MySql
云服务器:腾讯云



app启动时的操作:
    1.初始化亲友关系
    2.初始化好友列表
    3.接收聊天信息

功能点:
1.添加好友及删除功能
---功能实现:1.根据姓名,账号,手机号,邮箱号查询数据库用户表,将搜索到的信息数组返回前台
           2.客户端将需要添加的用户唯一ID发送到后台,后台将数据通过个推推送到客户端,并将添加好友信息的数据保存到数据库,标记状态为0
           3.如果客户端未关闭个推,接收到信息,可选择拒绝或者同意,并将数据返回到服务器,服务器根据数据更改标记,并推送到好友请求方的客户端

2.邀请注册上线功能
---功能实现:1.客户端将用户信息和关系信息传到服务器,服务器将生成的邀请码返回给客户端
           2.服务器将邀请信息存入到一张数据库表,字段有(id,用户id,邀请码,关系信息,状态)【通过rabbitMQ异步操作】
           3.邀请码被注册之后,服务器将邀请码表中的状态改为已邀请,并将亲友关系给用户初始化,及发送者的亲友关系也要初始化,将信息返回给客户端
           4.保存亲友关系的表字段(用户id,亲友id,亲友关系,亲友显示位置坐标)

3.好友聊天功能
---具体功能:发送文字,发送图片,语音消息,视频,位置信息
---功能实现:1.客户端启动即和服务器建立websocket连接,并建立心跳机制；服务器在内部维护一个channel连接数量的HashMap用于关联用户和channel之间的关系
           2.客户端将消息类型,发送者id,接收者id,消息内容等信息以websocket发送到服务器
           3.如果HashMap中没有获取到接受者的channel,表示用户离线,使用个推将消息推送到接受者客户端,并将消息加密保存到数据库,标记状态为未接收
           4.如果HashMap中有接受者的channel,表示用户在线,将消息推送给用户,接受者客户端接收到消息后,向服务器发送消息,
           告诉服务器消息以接收,服务器将数据库消息状态改为已接收
           5.如果个推被屏蔽且客户端离线,用户开启客户端时,会向后端发请求接收未接收的消息,并且服务器会更改消息状态为已接收

---注意点:1.实现数据库分库分表
         2.使用消息中间件来保存消息信息
         3.图片视频存储在fastdfs
         4.表情的存储


4.创建及群聊功能(四张表--群资料表，群好友表，群聊天信息表，分发给每个群员的聊天信息表)
---具体功能:发送文字,发送图片,语音消息,视频,位置信息
---功能实现:1.创建群:将群成员信息发送到服务器,服务器将群信息保存到数据库群信息表中,并生成唯一群id,将群成员信息保存到群成员表中,将群信息返回给客户端
           2.群聊:发送消息到服务器:客户端将群id,发送者id,消息类型,消息内容发送到服务器,
                  服务器分发消息:服务器先存储消息(单独一张表存聊天消息)；服务器根据群id从数据库读取出发送者外的好友列表，
                  遍历出在线的用户，并发送消息，将消息存入数据库群成员消息表中，状态标记为已发送
                  如果群用户不在线，将消息通过个推推送给用户，将消息存入数据库群成员消息表中，状态标记为未发送
                  当用户打开app是客户端会想服务器发送请求未读的群聊消息



5.发布亲友圈功能
---具体功能:亲友圈查看及评论功能
---功能实现:发布朋友圈消息
            当用户发布一条朋友圈消息的时候，后端逻辑的处理（A和B已经是好友关系）：
            1.用户A在朋友圈中发布一条消息，消息表t_friend_circle_message写入一条数据。
            2.时间轴表t_friend_circle_timeline中增加一条数据，uid设置A，is_own设置为1，表示在A的时间轴中增加一条自己发布的消息。
            3.查询用户A的好友，查到用户B（如果有还有其他好友D、E等等同样处理）
            4.时间轴表t_friend_circle_timeline中增加一条数据，uid设置B，is_own设置为0，表示在B的时间轴中增加一条好友发布的消息。
           添加好友
            当用户A，添加用户C为好友之后，触发同步好友时间轴的操作
            1.把消息表t_friend_circle_message好友C发布的所有消息添加到自己的时间轴中。
            2.再把消息表t_friend_circle_message自己发布的消息添加到好友C的时间轴中。
            3.使用好is_own字段，因为都是互相添加好友的消息到自己的时间轴中，所以都应该为false（0）。

---表结构：三张表:消息表很好理解，存储用户发送的内容，图片存地址。
                时间轴表在朋友圈中是最关键的，存储着所有用的时间轴信息，因为当用户去拉取好友圈的时候，
                    查询的就是本表，is_own字段用来区分当前数据是自己的发布还是好友发布的消息。
                评论表


难点:springsecurity  整合 websocket协议


activiti项目
















