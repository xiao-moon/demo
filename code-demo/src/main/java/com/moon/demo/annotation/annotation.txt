**Java内置注解**

Java 定义了一套注解，共有7个,3个在 java.lang 中，剩下4个在java.lang.annotation 中
1、作用在代码的注解
    1、@Override:检查该方法是否是重写方法。如果发现其父类，或者是引用的接口中并没有该方法时，会报编译错误
    2、@Deprecated:标记过时方法。如果使用该方法，会报编译警告。
    3、@SuppressWarnings:指示编译器去忽略注解中声明的警告。


2、作用在其他注解的注解(或者说元注解)
    1、@Target: 标记这个注解应该是哪种 Java 成员
        ElementType.TYPE 可以应用于类的任何元素。
        ElementType.FIELD 可以应用于字段或属性。
        ElementType.METHOD 可以应用于方法级注释。
        ElementType.PARAMETER 可以应用于方法的参数。
        ElementType.CONSTRUCTOR 可以应用于构造函数。
        ElementType.LOCAL_VARIABLE 可以应用于局部变量。
        ElementType.ANNOTATION_TYPE 可以应用于注释类型。
        ElementType.PACKAGE 可以应用于包声明。
        ElementType.TYPE_PARAMETER
        ElementType.TYPE_USE


    2、@Retention:标识这个注解怎么保存，是只在代码中，还是编入class文件中，或者是在运行时可以通过反射访问
        RetentionPolicy.SOURCE - 标记的注释仅保留在源级别中，并由编译器忽略。
        RetentionPolicy.CLASS - 标记的注释在编译时由编译器保留，但Java虚拟机（JVM）会忽略。
        RetentionPolicy.RUNTIME - 标记的注释由JVM保留，因此运行时环境可以使用它。

    3、@Documented:标记这些注解是否包含在用户文档中
    4、@Inherited:标记这个注解是继承于哪个注解类(默认 注解并没有继承于任何子类)


3、Java7新增注解
    1、@SafeVarargs:Java 7 开始支持，忽略任何使用参数为泛型变量的方法或构造函数调用产生的警告。
    2、@FunctionalInterface:Java 8 开始支持，标识一个匿名函数或函数式接口。
    3、@Repeatable:Java 8 开始支持，标识某注解可以在同一个声明上使用多次
